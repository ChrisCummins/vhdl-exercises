USAGE
=====

 TODO

FEATURES
========

 * 2 pass assembler
 * Inspired by AVR syntax / instruction set
 * Recursive macro lookups
 * Recursive file imports
 * Recursive numerical operations

WEAKNESSES
==========

 * Entirely case insensitive
 * No address management of DSEG
 * Single global namespace for all lookups
 * Line orientated
 * Uninformative error messages

DIRECTIVES
==========

.def    name value              Define a symbolic name
.undef  name                    Undeclare a symbolic name
.cseg                           Declares code segment
.dseg                           Declares data segment
.org    address                 Set program origin
.isr    number address          Define an ISR for interrupt number
.input  file                    Import an assembly source

INSTRUCTION SET
===============

OP      ARGS                    ICC     DESC
===================================================================
nop                             1       No operation
halt                            -       Halt process
jmp     address                 1       Jump
rjmp    immediate               1       Jump to relative offset
brts    address                 1       Branch if T flag set
rbrts   immediate               1       Relative branch if T flag set
breq    reg reg address         4*      Branch if equal
rbreq   reg reg immediate       4*      Relateive branch if equal
breqi   reg immediate address   8*      Branch if equal immediate
brne    reg reg address         4*      Branch if not equal
brnei   reg immediate address   8*      Branch if not equal immediate
seto    port and xor            1       Set output port
tsti    port and xor            1       Read input port
call    address                 1       Call subroutine
rcall   immediate               1       Call subroutine at relative offset
ret                             2       Return from subroutine
reti                            2       Return from interrupt
sei                             1       Global enable interrupts
cli                             1       Global disable interrupts
ld      reg address             2       Memorty to register
st      reg address             2       Register to memory
str     reg reg                 3*      Store register indirect memory
sti     immediate address       6*      Immedate to memory
ldd     reg reg reg             3       Indexed memory to register
lddi    reg reg immediate       7*      Indirect memory to register
std     reg reg reg             3       Register to indexed memory
stdi    reg immediate reg       7*      Register to indirect memory
pshr    reg                     2       Push
pshi    immediate               6*      Push immediate
popr    reg                     2       Pop
stio    port reg                2       Register to IO
ldio    reg port                1       IO to register
ldi     reg immediate           4*      Load imeediate
ldil    reg immediate           2       Load immediate lower
ldiu    reg immediate           2       Load immediate upper
and     reg reg reg             3       Bitwise AND
or      reg reg reg             3       Bitwise OR
xor     reg reg reg             3       Bitwise XOR
lsr     reg reg immediate       3       Logical shift right
lsl     reg reg immediate       3       Logical shift left
equ     reg reg                 3       Equals
eqi     reg immediate           7*      Equals immediate
neq     reg reg                 3       Not equals
neqi    reg immediate           7*      Not equals immediate
lt      reg reg                 3       Less than
lti     reg immediate           7*      Less than immediate
lts     reg reg                 3       Less than Signed
ltsi    reg immediate           7*      Less than Signed immmeidate
lte     reg reg                 3       Less than or equal
ltei    reg immediate           7*      Less than or equal immediate
ltes    reg reg                 3       Less than or equal Signed
ltesi   reg immediate           7*      Less than or equal Signed immediate
gt      reg reg                 3       Greater than
gti     reg immediate           7*      Greater than immediate
gts     reg reg                 3       Greater Than Signed
gtsi    reg immediate           7*      Greater Than Signed immediate
gte     reg reg                 3       Greater than or equal
gtei    reg immediate           7*      Greater than or equal immediate
gtes    reg reg                 3       Greater Than or Equal Signed
gtesi   reg immediate           7*      Greater Than or Equal Signed immediate
eqz     reg                     3       Equal zero
nez     reg                     3       Not equal zero
mov     reg reg                 3       Copy source to dest
clr     reg                     3       Clear bits in register
neg     reg                     3       Twoâ€™s Complement
inc     reg                     3       Increment
incs    reg                     3       Increment Signed
dec     reg                     3       Decrement
decs    reg                     3       Decrement Signed
add     reg reg reg             3       Add
addi    reg reg immediate       7*      Add immediate
adds    reg reg reg             3       Add Signed
addsi   reg reg immediate       7*      Add Signed immediate
sub     reg reg reg             3       Subtract
subi    reg reg immediate       7*      Subtract immediate
subs    reg reg reg             3       Subtract Signed
subsi   reg reg immediate       7*      Subtract Signed immediate

DATA SEGMENT
============

Syntax:

  <label>: <type> <size>

Where <type>:

      .BYTE
      .WORD

Examples:

  foobar: .BYTE 3

 * Data is aligned to word size

SYMBOLS
=======

Built-in static:

RAM_SIZE        Size of output RAM
IDT_SIZE        Size of interrupt descriptor table
IDT_START       Absolute address of IDT
PROG_START      Absolute address of start of code
__R             Internal register

Built-in dynamic:

ACTIVE_ADDRESS  The currently active RAM address
ACTIVE_SEGMENT  The current segment type
CSEG_SIZE       The current size of the code segment
DSEG_SIZE       The current size of the data segment

LOGICAL OPERATIONS
==================

A + B           Addition
A - B           Subtraction
A & B           Bitwise AND
A | B           Bitwise OR
A ^ B           Bitwise XOR
-A              Negative A
~A              One's complement
