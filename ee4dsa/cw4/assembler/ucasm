#!/usr/bin/env node

var lazy = require('lazy');
var fs  = require('fs');

var argv = require('optimist')
    .usage('Usage: $0 <assembly source>')
    .wrap(80)
    .demand('asm')
    .option('asm', {
      alias: 'a',
      desc: 'Input source path'
    })
    .option('output', {
      alias: 'o',
      default: 'a.out',
      desc: 'Set the destination path'
    })
    .option('size', {
      alias: 's',
      default: 4096,
      desc: 'Set the size of the output RAM'
    })
    .option('idt', {
      alias: 'i',
      default: 8,
      desc: 'Set the size of the interrupt descriptor table'
    })
    .option('list', {
      alias: 'l',
      default: false,
      desc: 'Generate annotated list output'
    }).argv;

/* Import the assembly routines */
eval(fs.readFileSync('ee4dsa-util.js') + '');
eval(fs.readFileSync('ee4dsa-assembler.js') + '');

/*
 * Open and read an input file, returning its contents. Operates
 * recursively on .input directives.
 */
var readAsmFile = function(file) {
  var lines = fs.readFileSync(file).toString().split('\n');

  /* Nest '.include' directives */
  for (var i in lines) {
    var match = lines[i].match(/^([ 	]+)?\.include "(.*)"([ 	]+)?$/);

    if (match) {
      lines[i] = readAsmFile(match[2]);
    }
  }

  return flatten(lines).join('\n');
};

try {
  /* Assemble input file(s) */
  assemble(readAsmFile(argv.asm), {
    size: argv.size,
    idtSize: argv.idt,
    listOn: argv.list
  }, function(err, data) {
    if (err) {
      process.stderr.write('fatal: ' + err + '\n');
      process.exit(2);
    }

    /* Write assembled output to file */
    fs.writeFile(argv.output, data, function(err) {
      if (err) {
        process.stderr.write('Unable to write file "' + argv.output + '"\n');
        process.exit(3);
      }
    });
  });
} catch (err) {
  process.stderr.write(err);
  process.exit(2);
}
